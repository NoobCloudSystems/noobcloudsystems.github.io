"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[824],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=o.createContext({}),s=function(e){var t=o.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=s(e.components);return o.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,u=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=s(r),g=n,b=d["".concat(u,".").concat(g)]||d[g]||c[g]||a;return r?o.createElement(b,i(i({ref:t},l),{},{components:r})):o.createElement(b,i({ref:t},l))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var s=2;s<a;s++)i[s]=r[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8807:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:2},i="Groups",p={unversionedId:"noobcloud-api/groups",id:"noobcloud-api/groups",title:"Groups",description:"Group Data",source:"@site/docs/noobcloud-api/groups.md",sourceDirName:"noobcloud-api",slug:"/noobcloud-api/groups",permalink:"/docs/noobcloud-api/groups",draft:!1,editUrl:"https://github.com/NoobCloudSystems/noobcloudsystems.github.io/blob/master/docs/noobcloud-api/groups.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Getting started",permalink:"/docs/noobcloud-api/getting-started"},next:{title:"Servers",permalink:"/docs/noobcloud-api/servers"}},u={},s=[{value:"Group Data",id:"group-data",level:2},{value:"Using GroupTypes",id:"using-grouptypes",level:3},{value:"Obtaining Groups",id:"obtaining-groups",level:3}],l={toc:s};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"groups"},"Groups"),(0,n.kt)("h2",{id:"group-data"},"Group Data"),(0,n.kt)("p",null,"Every ",(0,n.kt)("inlineCode",{parentName:"p"},"Server")," started by NoobCloud is subject to a certain ",(0,n.kt)("inlineCode",{parentName:"p"},"Group"),". Using NoobCloudAPI you can easily obtain information them."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"List<Group> groups = NoobCloudAPI.getInstance().getAllGroups();\nList<Group> gameGroups = NoobCloudAPI.getInstance().getAllGameGroups();\nList<Group> proxyGroups = NoobCloudAPI.getInstance().getAllProxyGroups();\n")),(0,n.kt)("p",null,"To get the number of players who are online in a ",(0,n.kt)("inlineCode",{parentName:"p"},"Group"),", you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"NoobCloudAPI.getInstance().getGroupOnlineCount(String groupName, GroupType groupType)")),(0,n.kt)("h3",{id:"using-grouptypes"},"Using GroupTypes"),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"Group")," can be characterised more precisely by checking its ",(0,n.kt)("inlineCode",{parentName:"p"},"GroupType")," with ",(0,n.kt)("inlineCode",{parentName:"p"},"Group#getGroupType()"),". You can also check if the group is a lobby group by using ",(0,n.kt)("inlineCode",{parentName:"p"},"Group#isLobby()"),". When joining the server, players are automatically connected to such servers.\nWith ",(0,n.kt)("inlineCode",{parentName:"p"},"Group#isStatic()")," you can check if the group is static. Servers in this group will not be deleted when the cloud is stopped."),(0,n.kt)("h3",{id:"obtaining-groups"},"Obtaining Groups"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"String groupName = Server#getGroupName();\nGroupType groupType = Server#getGroupType();\nOptional<Group> group = NoobCloudAPI.getInstance().getGroup(groupName);\n// The group is existing if the Optional returned is present.\n")))}c.isMDXComponent=!0}}]);