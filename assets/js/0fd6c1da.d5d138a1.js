"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[594],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(t),y=o,m=d["".concat(u,".").concat(y)]||d[y]||c[y]||a;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4070:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:4},l="Players",i={unversionedId:"noobcloud-api/players",id:"noobcloud-api/players",title:"Players",description:"CloudPlayer",source:"@site/docs/noobcloud-api/players.md",sourceDirName:"noobcloud-api",slug:"/noobcloud-api/players",permalink:"/docs/noobcloud-api/players",draft:!1,editUrl:"https://github.com/NoobCloudSystems/noobcloudsystems.github.io/blob/master/docs/noobcloud-api/players.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Servers",permalink:"/docs/noobcloud-api/servers"},next:{title:"NoobCloud - Plugins",permalink:"/docs/category/noobcloud---plugins"}},u={},s=[{value:"CloudPlayer",id:"cloudplayer",level:2},{value:"UUID and Username",id:"uuid-and-username",level:2}],p={toc:s};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"players"},"Players"),(0,o.kt)("h2",{id:"cloudplayer"},"CloudPlayer"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"CloudPlayer")," represents a player who is currently online. NoobCloudAPI allows you to connect him to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Server")," and informs you about his current ",(0,o.kt)("inlineCode",{parentName:"p"},"Server"),", his username and his ",(0,o.kt)("inlineCode",{parentName:"p"},"UUID"),"."),(0,o.kt)("p",null,"You can obtain a ",(0,o.kt)("inlineCode",{parentName:"p"},"CloudPlayer")," by his name or his ",(0,o.kt)("inlineCode",{parentName:"p"},"UUID"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Optional<CloudPlayer> cloudPlayer = NoobCloudAPI.getInstance().getCloudPlayer(String username);\nOptional<CloudPlayer> cloudPlayer = NoobCloudAPI.getInstance().getCloudPlayer(UUID uuid);\n// The player is online if the Optional returned by this methods is present.\n")),(0,o.kt)("p",null,"A list of all players can be accessed with ",(0,o.kt)("inlineCode",{parentName:"p"},"NoobCloudAPI.getInstance().getAllPlayers()"),"."),(0,o.kt)("p",null,"You can connect a player to a server using ",(0,o.kt)("inlineCode",{parentName:"p"},"CloudPlayer#connect(String serverName)"),"."),(0,o.kt)("h2",{id:"uuid-and-username"},"UUID and Username"),(0,o.kt)("p",null,"NoobCloudAPI stores the username and ",(0,o.kt)("inlineCode",{parentName:"p"},"UUID")," of each player in a database assuming you enabled this feature in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.yml"),"(Read again the following explenation: ",(0,o.kt)("a",{parentName:"p",href:"/docs/noobcloud-setup/configuration#configyml"},"configuration"),"). This allows you to check whether a player has already been online on your server network. In addition, you can get the username of an offline player from their ",(0,o.kt)("inlineCode",{parentName:"p"},"UUID")," and vice versa:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Optional<String> username = NoobCloudAPI.getInstance().getUsernameByUUID(UUID uuid);\nOptional<UUID> uuid = NoobCloudAPI.getInstance().getUUIDByUsername(String username);\n// If the optional returned by these methods is empty, no player with this username/uuid has been online yet.\n")))}c.isMDXComponent=!0}}]);